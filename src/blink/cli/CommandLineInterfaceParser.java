/* Generated By:JavaCC: Do not edit this line. CommandLineInterfaceParser.java */
package blink.cli;

import java.util.ArrayList;

public class CommandLineInterfaceParser implements CommandLineInterfaceParserConstants {

  public static void main(String args[]) throws ParseException {
    CommandLineInterfaceParser parser = new CommandLineInterfaceParser(System.in);
    parser.Script();
    System.out.println("Success on reading");
  }

  static final public NodeScript Script() throws ParseException {
        Node n;
        NodeScript result = new NodeScript();
    label_1:
    while (true) {
      if (jj_2_1(1)) {
        ;
      } else {
        break label_1;
      }
      n = Node();
                             result.addChild(n);
    }
    jj_consume_token(0);
                {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public Node Node() throws ParseException {
        Node n;
    if (jj_2_2(2) && (getToken(1).kind == IDENTIFIER && getToken(2).kind == EQUAL)) {
      n = Assignment();
                                                                                                         {if (true) return n;}
    } else if (jj_2_3(1)) {
      n = NodeWithValue();
                             {if (true) return n;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Node NodeWithValue() throws ParseException {
        Node n;
    if (jj_2_4(2) && (getToken(1).kind == INTEGER_LITERAL && getToken(2).kind == TWOPOINTS)) {
      n = Interval();
                                                                                                               {if (true) return n;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
        n = Number();
                        {if (true) return n;}
        break;
      case STRING_LITERAL:
        n = Text();
                        {if (true) return n;}
        break;
      case 31:
        n = List();
                        {if (true) return n;}
        break;
      default:
        jj_la1[0] = jj_gen;
        if (jj_2_5(2) && (getToken(1).kind == IDENTIFIER && getToken(2).kind != LPAR)) {
          n = Variable();
                                                                                                      {if (true) return n;}
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            n = Function();
                        {if (true) return n;}
            break;
          default:
            jj_la1[1] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Node NodeWithValueOrLocalAssignment() throws ParseException {
        Node n;
    if (jj_2_6(2) && (getToken(1).kind == IDENTIFIER && getToken(2).kind == EQUAL)) {
      n = LocalAssignment();
                                                                                                              {if (true) return n;}
    } else if (jj_2_7(1)) {
      n = NodeWithValue();
                             {if (true) return n;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public NodeAssignment Assignment() throws ParseException {
        Node n;
        Token t;
        String identifier;
    t = jj_consume_token(IDENTIFIER);
                identifier = t.image;
    jj_consume_token(EQUAL);
    n = NodeWithValue();
                  {if (true) return new NodeAssignment(identifier,n);}
    throw new Error("Missing return statement in function");
  }

  static final public NodeLocalAssignment LocalAssignment() throws ParseException {
        Node n;
        Token t;
        String identifier;
    t = jj_consume_token(IDENTIFIER);
                identifier = t.image;
    jj_consume_token(EQUAL);
    n = NodeWithValue();
                  {if (true) return new NodeLocalAssignment(identifier,n);}
    throw new Error("Missing return statement in function");
  }

  static final public NodeVariable Variable() throws ParseException {
        Token t;
        NodeIndex index = null;
    t = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 29:
      index = Index();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
                  {if (true) return new NodeVariable(t.image, index);}
    throw new Error("Missing return statement in function");
  }

  static final public NodeObject Number() throws ParseException {
         Token t;
         NodeObject result;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
                char c = t.image.charAt(t.image.length()-1);
                if (c == 'L' || c == 'l')
                   result = new NodeObject(new Long(Long.parseLong(t.image)));
                else
                   result = new NodeObject(new Integer(Integer.parseInt(t.image)));
                // System.out.println(result.getObject());
                {if (true) return result;}
      break;
    case FLOATING_POINT_LITERAL:
      t = jj_consume_token(FLOATING_POINT_LITERAL);
                result = new NodeObject(new Double(Double.parseDouble(t.image)));
                // System.out.println(result.getObject());
                {if (true) return result;}
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public NodeInterval Interval() throws ParseException {
         Token t;
         int i;
         int j;
         NodeInterval result;
    t = jj_consume_token(INTEGER_LITERAL);
                {char c = t.image.charAt(t.image.length()-1);
                if (c == 'L' || c == 'l')
                   i = (int) Long.parseLong(t.image);
                else
                i = (int) Integer.parseInt(t.image);}
    jj_consume_token(TWOPOINTS);
    t = jj_consume_token(INTEGER_LITERAL);
                {char c = t.image.charAt(t.image.length()-1);
                if (c == 'L' || c == 'l')
                   j = (int) Long.parseLong(t.image);
                else
                j = (int) Integer.parseInt(t.image);}
                {if (true) return new NodeInterval(i,j);}
    throw new Error("Missing return statement in function");
  }

  static final public NodeObject Text() throws ParseException {
  Token t;
    t = jj_consume_token(STRING_LITERAL);
                  // System.out.println(t.image);
                  {if (true) return new NodeObject(t.image.substring(1,t.image.length()-1));}
    throw new Error("Missing return statement in function");
  }

  static final public NodeFunction Function() throws ParseException {
        Token t;
        ArrayList<Node> nodes = new ArrayList<Node>();
        NodeIndex index = null;
        String identifier;
        Node n;
    t = jj_consume_token(IDENTIFIER);
                identifier = t.image;
    jj_consume_token(LPAR);
    if (jj_2_8(1)) {
      n = NodeWithValueOrLocalAssignment();
                                                        nodes.add(n);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 28:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_2;
        }
        jj_consume_token(28);
        n = NodeWithValueOrLocalAssignment();
                                                             nodes.add(n);
      }
    } else {
      ;
    }
    jj_consume_token(RPAR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 29:
      index = Index();
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
                NodeFunction  result = new NodeFunction(identifier, index);
                for (Node nn: nodes) {
                        result.addChild(nn);
           }
        {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public NodeIndex Index() throws ParseException {
        Token t;
        NodeIndex result = new NodeIndex();
        Node n;
    jj_consume_token(29);
    n = NodeWithValue();
                                   result.addChild(n);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 28:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
      jj_consume_token(28);
      n = NodeWithValue();
                                                                                    result.addChild(n);
    }
    jj_consume_token(30);
        {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public NodeList List() throws ParseException {
        Token t;
        NodeList result = new NodeList();
        Node n;
    jj_consume_token(31);
    if (jj_2_9(1)) {
      n = NodeWithValue();
                                     result.addChild(n);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 28:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_4;
        }
        jj_consume_token(28);
        n = NodeWithValue();
                                                                                      result.addChild(n);
      }
    } else {
      ;
    }
    jj_consume_token(32);
        {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static final private boolean jj_3R_6() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  static final private boolean jj_3R_22() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  static final private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) return true;
    }
    return false;
  }

  static final private boolean jj_3_7() {
    if (jj_3R_7()) return true;
    return false;
  }

  static final private boolean jj_3_6() {
    if (jj_3R_10()) return true;
    return false;
  }

  static final private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = getToken(1).kind == IDENTIFIER && getToken(2).kind == EQUAL;
    lookingAhead = false;
    if (!jj_semLA || jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_9() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3_8() {
    if (jj_3R_11()) return true;
    return false;
  }

  static final private boolean jj_3R_15() {
    if (jj_3R_20()) return true;
    return false;
  }

  static final private boolean jj_3_5() {
    if (jj_3R_9()) return true;
    return false;
  }

  static final private boolean jj_3R_14() {
    if (jj_3R_19()) return true;
    return false;
  }

  static final private boolean jj_3R_13() {
    if (jj_3R_18()) return true;
    return false;
  }

  static final private boolean jj_3R_8() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    if (jj_scan_token(TWOPOINTS)) return true;
    return false;
  }

  static final private boolean jj_3_9() {
    if (jj_3R_7()) return true;
    return false;
  }

  static final private boolean jj_3R_12() {
    if (jj_3R_17()) return true;
    return false;
  }

  static final private boolean jj_3_4() {
    if (jj_3R_8()) return true;
    return false;
  }

  static final private boolean jj_3R_7() {
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = getToken(1).kind == INTEGER_LITERAL && getToken(2).kind == TWOPOINTS;
    lookingAhead = false;
    if (!jj_semLA || jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = getToken(1).kind == IDENTIFIER && getToken(2).kind != LPAR;
    lookingAhead = false;
    if (!jj_semLA || jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_20() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static final private boolean jj_3R_19() {
    if (jj_scan_token(31)) return true;
    return false;
  }

  static final private boolean jj_3R_10() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  static final private boolean jj_3_3() {
    if (jj_3R_7()) return true;
    return false;
  }

  static final private boolean jj_3R_16() {
    if (jj_3R_21()) return true;
    return false;
  }

  static final private boolean jj_3_2() {
    if (jj_3R_6()) return true;
    return false;
  }

  static final private boolean jj_3R_5() {
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = getToken(1).kind == IDENTIFIER && getToken(2).kind == EQUAL;
    lookingAhead = false;
    if (!jj_semLA || jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_23() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  static final private boolean jj_3_1() {
    if (jj_3R_5()) return true;
    return false;
  }

  static final private boolean jj_3R_21() {
    if (jj_scan_token(29)) return true;
    return false;
  }

  static final private boolean jj_3R_18() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  static public CommandLineInterfaceParserTokenManager token_source;
  static JavaCharStream jj_input_stream;
  static public Token token, jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static public boolean lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[8];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x80122000,0x2000000,0x20000000,0x22000,0x10000000,0x20000000,0x10000000,0x10000000,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[9];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  public CommandLineInterfaceParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public CommandLineInterfaceParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CommandLineInterfaceParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public CommandLineInterfaceParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new CommandLineInterfaceParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public CommandLineInterfaceParser(CommandLineInterfaceParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(CommandLineInterfaceParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  static final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.Vector jj_expentries = new java.util.Vector();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  static public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[33];
    for (int i = 0; i < 33; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 8; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 33; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static final public void enable_tracing() {
  }

  static final public void disable_tracing() {
  }

  static final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 9; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
